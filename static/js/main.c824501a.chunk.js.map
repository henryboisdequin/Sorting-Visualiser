{"version":3,"sources":["Algorithms/MergeSort.js","Algorithms/BubbleSort.js","Algorithms/QuickSort.js","Visualizer/Visualizer.jsx","Algorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","helperArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","x","swapped","swap","bubbleSort","firstIndex","secondIndex","temp","getQuickSortAnimations","doQuickSort","pivotIdx","getRandomNumber","swapEleInArray","lti","partitionArray","firstIdx","secondIdx","screenWidth","window","innerWidth","screenHeight","innerHeight","anSpeed","SortingVisualizer","props","animationSpeed","numberOfBars","primaryColor","secondaryColor","barHeight","state","this","resetArray","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","position","insertionSort","getInsertionSortAnimations","className","map","value","index","key","onClick","mergeSort","quickSort","React","Component","min","max","random","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c824501a.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const helperArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, helperArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, helperArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(helperArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(helperArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, helperArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  helperArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (helperArray[i] <= helperArray[j]) {\n      animations.push([k, helperArray[i]]);\n      mainArray[k++] = helperArray[i++];\n    } else {\n      animations.push([k, helperArray[j]]);\n      mainArray[k++] = helperArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, helperArray[i]]);\n    mainArray[k++] = helperArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, helperArray[j]]);\n    mainArray[k++] = helperArray[j++];\n  }\n}\n","export function getBubbleSortAnimations(array) {\n  let animations = [];\n  let helperArray = array.slice();\n  bubbleSort(helperArray, animations);\n  return animations;\n}\n\nfunction bubbleSort(helperArray, animations) {\n  const length = helperArray.length;\n  let x = length - 1;\n  while (x > 0) {\n    let swapped = false;\n    for (let i = 0; i < x; ++i) {\n      animations.push([\"comparison1\", i, i + 1]);\n      animations.push([\"comparison2\", i, i + 1]);\n      if (helperArray[i] > helperArray[i + 1]) {\n        swapped = true;\n        animations.push([\"swap\", i, helperArray[i + 1]]);\n        animations.push([\"swap\", i + 1, helperArray[i]]);\n        swap(helperArray, i, i + 1);\n      }\n    }\n    if (!swapped) break;\n    x--;\n  }\n}\n\nfunction swap(helperArray, firstIndex, secondIndex) {\n  let temp = helperArray[firstIndex];\n  helperArray[firstIndex] = helperArray[secondIndex];\n  helperArray[secondIndex] = temp;\n}\n","import { getRandomNumber } from \"../Visualizer/Visualizer\";\n\nexport function getQuickSortAnimations(array) {\n  let animations = [];\n  let helperArray = array.slice();\n  doQuickSort(helperArray, 0, helperArray.length - 1, animations);\n  array = helperArray;\n  return animations;\n}\n\nfunction doQuickSort(helperArray, startIdx, endIdx, animations) {\n  let pivotIdx;\n  if (startIdx === endIdx) return;\n  if (startIdx < endIdx) {\n    pivotIdx = partitionArray(helperArray, startIdx, endIdx, animations);\n    doQuickSort(helperArray, startIdx, pivotIdx - 1, animations);\n    doQuickSort(helperArray, pivotIdx + 1, endIdx, animations);\n  }\n}\n\nfunction partitionArray(helperArray, startIdx, endIdx, animations) {\n  let pivotIdx = getRandomNumber(startIdx, endIdx); // get a random index in array for pivot\n\n  animations.push([\"comparison1\", pivotIdx, endIdx]);\n  animations.push([\"swap\", pivotIdx, helperArray[endIdx]]);\n  animations.push([\"swap\", endIdx, helperArray[pivotIdx]]);\n  animations.push([\"comparison2\", pivotIdx, endIdx]);\n  swapEleInArray(helperArray, pivotIdx, endIdx);\n\n  let lti = startIdx;\n\n  for (let i = startIdx; i < endIdx; ++i) {\n    animations.push([\"comparison1\", i, endIdx]);\n    animations.push([\"comparison2\", i, endIdx]);\n    if (helperArray[i] <= helperArray[endIdx]) {\n      animations.push([\"comparison1\", i, lti]);\n      animations.push([\"swap\", i, helperArray[lti]]);\n      animations.push([\"swap\", lti, helperArray[i]]);\n      animations.push([\"comparison2\", i, lti]);\n      swapEleInArray(helperArray, i, lti);\n      lti++;\n    }\n  }\n  animations.push([\"comparison1\", lti, endIdx]);\n  animations.push([\"swap\", endIdx, helperArray[lti]]);\n  animations.push([\"swap\", lti, helperArray[endIdx]]);\n  animations.push([\"comparison2\", lti, endIdx]);\n\n  swapEleInArray(helperArray, lti, endIdx);\n  return lti;\n}\n\nfunction swapEleInArray(helperArray, firstIdx, secondIdx) {\n  let temp = helperArray[firstIdx];\n  helperArray[firstIdx] = helperArray[secondIdx];\n  helperArray[secondIdx] = temp;\n}\n","import React from \"react\";\n// Styles\nimport \"./Visualizer.css\";\nimport \"tachyons\";\n// Sorting Algorithms\nimport { getMergeSortAnimations } from \"../Algorithms/MergeSort\";\nimport { getBubbleSortAnimations } from \"../Algorithms/BubbleSort\";\nimport { getInsertionSortAnimations } from \"../Algorithms/InsertionSort\";\nimport { getQuickSortAnimations } from \"../Algorithms/QuickSort\";\n\n// Make responsive on all screens\nconst screenWidth = window.innerWidth;\nconst screenHeight = window.innerHeight;\n\nlet anSpeed = 1; // animation speed\nif (screenWidth < 700) {\n  anSpeed = 3;\n}\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Util variables\n    this.animationSpeed = anSpeed;\n    this.numberOfBars = screenWidth / 4 - 20;\n    this.primaryColor = \"aqua\";\n    this.secondaryColor = \"red\";\n    this.barHeight = screenHeight - 100;\n\n    // State\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    // On reload or visit page\n    this.resetArray();\n  }\n\n  resetArray() {\n    // Resets an array with random numbers\n    const array = [];\n    for (let i = 0; i < this.numberOfBars; i++) {\n      array.push(getRandomNumber(5, this.barHeight));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    // Handles displaying merge sort animations\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const ifColorChange = i % 3 !== 2;\n      if (ifColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? this.secondaryColor : this.primaryColor;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.animationSpeed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.animationSpeed);\n      }\n    }\n  }\n\n  quickSort() {\n    // Handles displaying quick sort animations\n    const animations = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparison1\" ||\n        animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparison1\"\n            ? this.secondaryColor\n            : this.primaryColor;\n        const [, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.animationSpeed);\n      } else {\n        const [, barIndex, newHeight] = animations[i];\n        if (barIndex === -1) {\n          continue;\n        }\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * this.animationSpeed);\n      }\n    }\n  }\n\n  insertionSort() {\n    // Handles displaying insertion sort animations\n    const animations = getInsertionSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparison1\" ||\n        animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparison1\"\n            ? this.secondaryColor\n            : this.primaryColor;\n        const [, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.animationSpeed);\n      } else {\n        const [, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * this.animationSpeed);\n      }\n    }\n  }\n\n  bubbleSort() {\n    // Handles displaying bubble sort animations\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparison1\" ||\n        animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange) {\n        const color =\n          animations[i][0] === \"comparison1\"\n            ? this.secondaryColor\n            : this.primaryColor;\n        const [, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.animationSpeed);\n      } else {\n        const [, barIndex, newHeight] = animations[i];\n        if (barIndex === -1) {\n          continue;\n        }\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * this.animationSpeed);\n      }\n    }\n  }\n\n  render() {\n    const { array } = this.state;\n    return (\n      <div className=\"array-container\">\n        {array.map((value, index) => (\n          <div\n            className=\"array-bar\"\n            key={index}\n            style={{ height: `${value}px` }}\n          ></div>\n        ))}\n        {/* BUTTONS Note: all css classes except for button-sort come from tachyons */}\n        <button\n          className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-light-red button-sort\"\n          onClick={() => this.resetArray()}\n        >\n          Generate New Array\n        </button>\n        <button\n          className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-light-red button-sort\"\n          onClick={() => this.mergeSort()}\n        >\n          Merge Sort\n        </button>\n        <button\n          className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-light-red button-sort\"\n          onClick={() => this.quickSort()}\n        >\n          Quick Sort\n        </button>\n        <button\n          className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-light-red button-sort\"\n          onClick={() => this.insertionSort()}\n        >\n          Insertion Sort\n        </button>\n        <button\n          className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-light-red button-sort\"\n          onClick={() => this.bubbleSort()}\n        >\n          Bubble Sort\n        </button>\n      </div>\n    );\n  }\n}\n\nexport function getRandomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function getInsertionSortAnimations(array) {\n  let animations = [];\n  let helperArray = array.slice();\n  insertionSort(helperArray, animations);\n  return animations;\n}\n\nfunction insertionSort(helperArray, animations) {\n  const length = helperArray.length;\n  for (let i = 1; i < length; i++) {\n    let position = helperArray[i];\n    let j = i - 1;\n    animations.push([\"comparison1\", j, i]);\n    animations.push([\"comparison2\", j, i]);\n    while (j >= 0 && helperArray[j] > position) {\n      animations.push([\"overwrite\", j + 1, helperArray[j]]);\n      helperArray[j + 1] = helperArray[j];\n      j = j - 1;\n      if (j >= 0) {\n        animations.push([\"comparison1\", j, i]);\n        animations.push([\"comparison2\", j, i]);\n      }\n    }\n    animations.push([\"overwrite\", j + 1, position]);\n    helperArray[j + 1] = position;\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport SortingVisualizer from \"./Visualizer/Visualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}